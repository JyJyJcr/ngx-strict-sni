name: test & release
on:
  push:
    branches: main
    tags: v*

jobs:
  compile:
    name: ${{ matrix.mode.tr }} on ${{matrix.target.name}}
    runs-on: ${{ matrix.target.host }}
    strategy:
      matrix:
        mode:
          - tr: release #${{ startsWith(github.ref,'refs/tags/v') && 'release' || 'test' }}
            dr: release  #${{ startsWith(github.ref,'refs/tags/v') && 'release' || 'debug' }}
            bool: true #${{ startsWith(github.ref,'refs/tags/v') }}
        target:
          - name: osx_arm64
            triple: aarch64-apple-darwin
            ngx: 1.25.4
            host: macos-14
            docker: false
            cross: false
          - name: osx_amd64
            triple: x86_64-apple-darwin
            ngx: 1.25.4
            host: macos-13
            docker: false
            cross: false
          - name: debian12_arm64
            triple: aarch64-unknown-linux-gnu
            ngx: 1.22.1
            host: ubuntu-latest
            docker: true
            cross: false
          - name: debian12_amd64
            triple: x86_64-unknown-linux-gnu
            ngx: 1.22.1
            host: ubuntu-latest
            docker: true
            cross: false
    steps:
      - name: checkout
        uses: actions/checkout@v4
      - name: cache
        uses: actions/cache@v4
        with:
          path: |
            ${{ github.workspace }}/.cache/src
            ${{ github.workspace }}/.nginx
            ${{ github.workspace }}/target
          key: src+${{matrix.target.name}}+${{matrix.target.ngx}}+${{ github.run_id }}
          restore-keys: src+${{matrix.target.name}}+${{matrix.target.ngx}}+
      - name: prepare docker
        uses: docker/setup-qemu-action@v3
        if: ${{matrix.target.docker}}
      - name: run in docker
        run: |
          docker build ./cicd/target/${{matrix.target.name}} -t "runner:latest"
          docker run \
          --rm -i -v $PWD:/repo runner:latest bash <<'EOF'
          set -xeu
          cd /repo
          cicd/maker.sh ${{matrix.target.name}} ${{matrix.target.ngx}} ${{matrix.target.triple}} ${{ matrix.mode.tr }}
          EOF
          sudo chown -R "$(id -u $USER):$(id -g $USER)" .
        if: ${{matrix.target.docker}}
      - name: run in real
        run: |
          cicd/maker.sh ${{matrix.target.name}} ${{matrix.target.ngx}} ${{matrix.target.triple}} ${{ matrix.mode.tr }}
        if: ${{!matrix.target.docker}}
      - name: raw upload
        uses: actions/upload-artifact@v4
        with:
          name: raw+${{ matrix.target.name }}
          path: |
            .nginx/${{matrix.target.ngx}}/${{matrix.target.triple}}/*.so
            .nginx/${{matrix.target.ngx}}/${{matrix.target.triple}}/*.dylib
      - name: deb upload
        uses: actions/upload-artifact@v4
        with:
          name: deb+${{ matrix.target.name }}
          path: target/debian/*.deb
        if: matrix.mode.bool && startsWith(matrix.target.name,'debian')
  publish:
    name: publish binary and package
    needs: compile
    runs-on: ubuntu-latest
    permissions:
      contents: write
    #if:# startsWith(github.ref,'refs/tags/v')
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          ref: publish
      - name: set gitconfig
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com
      - name: inspect
        run: |
          git branch
          git remote
      - name: merge main to publish
        run: |
          git branch main origin/main
          git merge main -m "ci: catch up to main"
      - name: (apt) install reprepro
        run: |
          sudo apt-get -y install reprepro
      - name: (apt) download .deb from debian12_amd64
        id: dl-debian12_amd64
        uses: actions/download-artifact@v4
        with:
          name: deb+debian12_amd64
          path: cicd/target/debian12_amd64
      - name: (apt) download .deb from debian12_arm64
        uses: actions/download-artifact@v4
        with:
          name: deb+debian12_arm64
          path: cicd/target/debian12_arm64
      - name: (apt) create repository
        run: |
          cd publish/apt
          for lib in $(ls ../../cicd/target/debian12_amd64 |grep -E '\.deb');do
            reprepro includedeb bookworm "../../cicd/target/debian12_amd64/$lib"
          done
          for lib in $(ls ../../cicd/target/debian12_arm64 |grep -E '\.deb');do
            reprepro includedeb bookworm "../../cicd/target/debian12_arm64/$lib"
          done
          reprepro export
          rm -r db
          cd -
          git add ./publish/apt/
          git commit -m "ci: generate/update debian repository"
      - name: push
        run: git push
